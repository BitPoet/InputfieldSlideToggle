<?php namespace ProcessWire;

class InputfieldSlideToggle extends InputfieldCheckbox {

	public static function getModuleInfo() {
		return [
			"title"		=>	"Sliding Toggle",
			"summary"	=>	"Smartphone style sliding toggle as replacement for plain checkboxes",
			"version"	=>	"0.0.3",
			"requires"	=>	"InputfieldCheckbox",
			"installs"	=>	"FieldtypeSlideToggle"
		];
	}

	public function __construct() {
		$this->set('tsOffColor', '');
		$this->set('tsOnColor', '');
		$this->set('tsSize', '');
		
		parent::__construct();
	}
		
	public function ___getConfigInputfields() {

		$inputfields = parent::___getConfigInputfields();

		$f = $this->wire('modules')->get('InputfieldSelect'); 
		$f->attr('name+id', 'tsOffColor');
		$f->label = $this->_("Off State Color");
		$f->description = $this->_("Color to use when checkbox is unchecked. Defaults to grey.");
		$f->addOptions([
			""			=>	_("Grey"),
			"red"		=>	_("Red")
		]);
		$f->attr('value', $this->getSetting("tsOffColor"));
		$f->columnWidth = 50;
		$inputfields->append($f);

		$f = $this->wire('modules')->get('InputfieldSelect'); 
		$f->attr('name+id', 'tsOnColor');
		$f->label = $this->_("On State Color");
		$f->description = $this->_("Color to use when checkbox is checked. Defaults to blue.");
		$f->addOptions([
			""			=>	_("Blue"),
			"black"		=>	_("Black"),
			"grey"		=>	_("Grey"),
			"green"		=>	_("Green"),
			"orange"	=>	_("Orange"),
			"red"		=>	_("Red"),
		]);
		$f->attr('value', $this->getSetting("tsOnColor"));
		$f->columnWidth = 50;
		$inputfields->append($f);
		
		$f = $this->wire('modules')->get('InputfieldSelect'); 
		$f->attr('name+id', 'tsSize');
		$f->label = $this->_("Size of Toggle");
		$f->description = $this->_("Select the size in which to render the toggle, defaults to medium");
		$f->addOptions([
			"tiny"		=>	_("Small"),
			""			=>	_("Medium"),
			"big"		=>	_("Big"),
			"giant"		=>	_("Extra Big")
		]);
		$f->attr('value', $this->getSetting('tsSize'));
		$inputfields->append($f);

		return $inputfields;
	}
	
	public function ___render() {
		if($this->tsOffColor) {
			$this->addClass('st-off-' . $this->tsOffColor);
		}
		
		if($this->tsOnColor) {
			$this->addClass('st-on-' . $this->tsOnColor);
		}
		
		if($this->tsSize) {
			$this->addClass($this->tsSize);
		}
		
		$this->addClass('slidetoggle');
		
		$label = '';
		$user = $this->wire('user');
		
		if($user->language) $label = $this->getSetting("checkboxLabel$user->language"); 
		if(!$label) $label = $this->getSetting("checkboxLabel");
		if(!$label && $this->checkedValueIsLabel) $label = $this->checkedValue;
		if(!$label) $label = $this->getSetting('label2'); 
		
		$this->set('skipLabel', $this->description || $label ? Inputfield::skipLabelFor : Inputfield::skipLabelHeader);
		if(!$label) $label = $this->label;
		
		$attrs = $this->getAttributes();
		$attrs['value'] = $this->checkedValue; 
		
		if($this->getSetting('entityEncodeLabel') !== false) {
			$label = $this->entityEncode($label, Inputfield::textFormatBasic);
		}
		
		$out = 	
			"<label for='{$this->id}'>" .
				"<input type='checkbox' " . $this->getAttributesString($attrs) . " />" . 
				"<div><div></div></div>" .
				"<span class='pw-no-select'>$label</span> " .
			"</label>" .
		"";
		
		return $out; 
	}
	
}

